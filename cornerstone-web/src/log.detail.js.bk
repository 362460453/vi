(function() {
    'use strict';

    angular
        .module('viModule')
        .controller('LogDetailController', LogDetailController);


    /** @ngInject */
    function LogDetailController($scope, $location, $stateParams, logInfo, $sce, SiteCache, $element) {
        var vm = this;
        var allTags = {};
        vm.seleTags = {};
        vm.tags = [];
        var logSize = $stateParams.size;
        var maxSize = Math.ceil(logSize / 1024.0 / 1024);
        var stepSizes = d3.range(1, maxSize + 1, 1);

        var slider = d3.slider().min(1).max(maxSize).tickValues([0, maxSize]).stepValues(stepSizes);
        slider.callback(function(value) {
            vm.loadingComplete = false;
            //loadData(value);
        });
        slider.value(maxSize);
        // Render the slider in the div
        d3.select('.partion-selector').call(slider);
        var container = d3.select($element[0]).select('.log-detail>pre').on('click', function() {
            $scope.$apply(function() {
                vm.showFilter = false;
            });
        });

        var allAreas;
        var loadData = function(partitionIndex) {
            logInfo.getDetail($stateParams.name, {
                'encoding': ($location.search().encoding || ''),
                'partitionIndex': partitionIndex
            }, function(data) {


                vm.loadingComplete = true;
                var linNum = 0;
                var lines = [{
                    tag: 'normal',
                    num: linNum,
                    content: []
                }];
                var currentLine = lines[0];
		d3.select($element[0]).html(
                ('\n' + data).replace(/\n([^\n]*)(?=\n)/g, function(match, p1, p2, offset) {

                    var oldLen = p1.length;
                    var isBeginTag = false;
                    var tags = [];
                    p1 = p1.replace(/\[\s*([^\]\s]{2,80})\s*\]/g, function(match, m1, toffset) {
                        m1 = m1.replace(/\.|:/g, '-');
                        var rtn = '<span class="log-tag ' + m1 + '">[' + m1 + ']</span>';
                        if (toffset === 0) {
                            linNum++;
                            lines.push({
                                tag: 'normal',
                                num: linNum,
                                content: []
                            });
                            currentLine = lines[linNum];
                            currentLine.tag = m1;
                            isBeginTag = true;
                        }
                        tags.push(m1);
                        if (m1 in allTags) {
                            allTags[m1]++;
                        } else {
                            vm.seleTags[m1] = false;
                            allTags[m1] = 1;
                        }
                        return rtn;
                    });
                    var lineClass = 'normal-line';

                    if (p1.length === 0) {
                        p1 = '\n';
                    }

                    currentLine.content.push({
                        content: p1,
                        num: linNum,
                        tags: tags
                    });

		    return '<div>'+p1+'</div>';
                }));
	    return;
                allAreas = container.selectAll('.area').data(lines).enter().append('div').attr('class', function(d) {
                    return d.tag + ' area';
                });
                allAreas.append('div').attr('class', 'more').text('...').on('click', function() {
                    d3.select(this.parentElement.previousElementSibling).attr('show', 'show').attr('all', 'all').select('.more:last-child').attr('hide', 'hide');
                    d3.select(this).attr('hide', 'hide');
                });
                allAreas.append('span').attr('class', 'tools').html(function(d) {
                    return '<span class="btn show-relate"><i class="fa fa-angle-double-up"></i><i class="fa fa-angle-double-down"></i></span>';
                }).on('click', function() {

                    var parentNode = d3.select(this.parentElement);
                    if (parentNode.attr('all') == 'all') {
                        parentNode.attr('all', null);
                    } else {
                        parentNode.attr('all', 'all');
                    }
                });

                allAreas.selectAll('div.line').data(function(d) {
                    return d.content;
                }).enter().append('div').attr('class', 'line').html(function(d) {
                    return d.content;
                });
                allAreas.append('div').attr('class', 'more').text('...').on('click', function() {
                    d3.select(this.parentElement.nextElementSibling).attr('show', 'show').attr('all', 'all').select('.more:first-child').attr('hide', 'hide');
                    d3.select(this).attr('hide', 'hide');
                });
                for (var n in allTags) {
                    vm.tags.push({
                        key: n,
                        count: allTags[n]
                    });
                }



            });
        };

        vm.loadingComplete = false;
        loadData(-1);

        var showAreas = {};
        vm.filterTag = function(tag) {
            showAreas = {};
            if (vm.seleTags[tag]) {
                vm.showFilter = false;
            }
            vm.isInFilter = true;
            vm.loadingComplete = false;
            container.selectAll(".line").attr('show', function(d) {

                var hasTag = d.tags.some(function(x) {
                    return vm.seleTags[x];
                });
                if (hasTag) {
                    showAreas[d.num] = true;
                }

                return hasTag ? 'show' : 'hide';
            });
            allAreas.attr('show', function(d) {

                return showAreas[d.num] ? 'show' : 'hide';
            });
            vm.loadingComplete = true;
        };



        vm.clearFilter = function() {

            vm.showFilter = false;
            vm.isInFilter = false;
            container.selectAll('.area').attr('all', null);
            container.selectAll('.more').attr('hide', null);
            for (var t in vm.seleTags) {
                vm.seleTags[t] = false;
            }
        };

        vm.toBottom = function() {

            $location.hash('vi-log-top');
            $location.hash('vi-log-bottom');
        };
        vm.toTop = function() {

            $location.hash('vi-log-top');
        };

        vm.search = function() {

            if (!vm.showFilter) {
                container.selectAll('.line').style('display', function() {

                    return d3.select(this).text().indexOf(vm.keyword) >= 0 ? '' : 'none';
                });
            }
        };

    }
})();
